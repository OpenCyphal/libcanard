name: Main Workflow

on:
  push:
    branches: [ master, actions]
  pull_request:
    branches: [ master, actions ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  debug:
    env:
      BUILD_TYPE: Debug

    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain: ['clang', 'gcc']
        include:
          - toolchain: gcc
            c-compiler: gcc
            cxx-compiler: g++
          - toolchain: clang
            c-compiler: clang-11
            cxx-compiler: clang++-11

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: sudo apt install gcc-multilib g++-multilib clang-tidy-11 clang-format-11

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER=${{ matrix.c-compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }} tests

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: make VERBOSE=1

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: make test

  release:
    env:
      BUILD_TYPE: Release

    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain: ['clang', 'gcc']
        include:
          - toolchain: gcc
            c-compiler: gcc
            cxx-compiler: g++
          - toolchain: clang
            c-compiler: clang-11
            cxx-compiler: clang++-11

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: sudo apt install gcc-multilib g++-multilib

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER=${{ matrix.c-compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }} -DNO_STATIC_ANALYSIS=1 tests

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: make VERBOSE=1

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: make test

  minsizerel:
    env:
      BUILD_TYPE: MinSizeRel

    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain: ['clang', 'gcc']
        include:
          - toolchain: gcc
            c-compiler: gcc
            cxx-compiler: g++
          - toolchain: clang
            c-compiler: clang-11
            cxx-compiler: clang++-11

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: sudo apt install gcc-multilib g++-multilib

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER=${{ matrix.c-compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }} -DNO_STATIC_ANALYSIS=1 tests

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: make VERBOSE=1

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: make test

  avr:
    env:
      mcu: at90can64
      flags: -Wall -Wextra -Werror -pedantic -Wconversion -Wtype-limits

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: sudo apt install gcc-avr avr-libc

    - name: Build C99
      run: avr-gcc libcanard/*.c -c -std=c99 -mmcu=${{ env.mcu }} ${{ env.flags }}

    - name: Build C11
      run: avr-gcc libcanard/*.c -c -std=c11 -mmcu=${{ env.mcu }} ${{ env.flags }}

    - name: Build GNU99
      run: avr-gcc libcanard/*.c -c -std=gnu99 -mmcu=${{ env.mcu }} ${{ env.flags }}

    - name: Build GNU11
      run: avr-gcc libcanard/*.c -c -std=gnu11 -mmcu=${{ env.mcu }} ${{ env.flags }}
