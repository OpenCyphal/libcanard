/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: ${t.source_file}
 */
%if not t.header_only
#include "${t.header_filename}"
#include "canard.h"
%endif

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) >= max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

<!--(macro generate_primary_body)--> #! type_name, service, max_bitlen, fields, constants, union, has_array, has_float16

 %if max_bitlen

/**
  * @brief ${type_name}_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns new offset
  */
uint32_t ${type_name}_encode_internal(${type_name}* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
  %if union
    // Max Union Tag Value
    CANARD_ASSERT(source->union_tag <= ${(len(fields) - 1)});
  %endif
    %if has_array:
    uint32_t c = 0;
    %endif
    %if has_float16:
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif
    %endif

    %if union:
    // Union Tag ${union} bits
    canardEncodeScalar(msg_buf, offset, ${union}, (void*)&source->union_tag); // ${union} bits
    offset += ${union};
    $!setvar("union_index", "0")!$
    %endif

    % for f in fields:
     %if union:
    ${'if' if not union_index else 'else if'} (source->union_tag == ${union_index}) {
      $!setvar("union_index", "union_index + 1")!$
     %endif
        %if f.type_category == t.CATEGORY_ARRAY
            %if f.dynamic_array == True

    // Dynamic Array (${f.name})
                %if f.last_item
                    %if f.bitlen < 8
    ${f.array_max_size_bit_len}
    //  - Add array length, last item, but bitlen < 8.
    canardEncodeScalar(msg_buf, offset, ${f.array_max_size_bit_len}, (void*)&source->${'%s' % ((f.name + '.len'))});
    offset += ${f.array_max_size_bit_len};
                    %else
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, ${f.array_max_size_bit_len}, (void*)&source->${'%s' % ((f.name + '.len'))});
        offset += ${f.array_max_size_bit_len};
    }
                    %endif
                %else
    // - Add array length
    canardEncodeScalar(msg_buf, offset, ${f.array_max_size_bit_len}, (void*)&source->${'%s' % ((f.name + '.len'))});
    offset += ${f.array_max_size_bit_len};
                %endif

    // - Add array items
    for (c = 0; c < source->${'%s' % ((f.name + '.len'))}; c++)
    {
                %if f.cpp_type_category == t.CATEGORY_COMPOUND:
        offset = ${f.cpp_type}_encode_internal((void*)&source->${'%s' % ((f.name + '.data'))}[c], msg_buf, offset, 0);
                %else
        canardEncodeScalar(msg_buf,
                           offset,
                           ${f.bitlen},
                           (void*)(source->${'%s' % ((f.name + '.data'))} + c));// ${f.max_size}
        offset += ${f.bitlen};
                %endif
    }
            %else
    // Static array (${f.name})
    for (c = 0; c < ${f.array_size}; c++)
    {
        canardEncodeScalar(msg_buf, offset, ${f.bitlen}, (void*)(source->${f.name} + c)); // ${f.max_size}
        offset += ${f.bitlen};
    }
            %endif

        %elif f.type_category == t.CATEGORY_VOID:

    // Void${f.bitlen}
    offset += ${f.bitlen};
        %elif f.type_category == t.CATEGORY_COMPOUND:

    // Compound
          %if f.last_item
    offset = ${f.cpp_type}_encode_internal(&source->${f.name}, msg_buf, offset, root_item);
          %else
    offset = ${f.cpp_type}_encode_internal(&source->${f.name}, msg_buf, offset, 0);
          %endif
        %elif f.type_category == t.CATEGORY_PRIMITIVE and f.cpp_type == "float" and f.bitlen == 16:

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->${f.name});
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->${f.name};
#endif
    canardEncodeScalar(msg_buf, offset, ${f.bitlen}, (void*)&tmp_float); // ${f.max_size}
    offset += ${f.bitlen};
        %else
            %if f.saturate
              %if f.signedness == 'true'
    source->${f.name} = CANARD_INTERNAL_SATURATE(source->${f.name}, ${f.max_size})
              %else
    source->${f.name} = CANARD_INTERNAL_SATURATE_UNSIGNED(source->${f.name}, ${f.max_size})
              %endif
            %endif
    canardEncodeScalar(msg_buf, offset, ${f.bitlen}, (void*)&source->${f.name}); // ${f.max_size}
    offset += ${f.bitlen};

        %endif
     %if union:
    }
     %endif
    % endfor

    return offset;
}

/**
  * @brief ${type_name}_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t ${type_name}_encode(${type_name}* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = ${type_name}_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief ${type_name}_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     ${type_name} dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval new offset or ERROR value if < 0
  */
int32_t ${type_name}_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  ${type_name}* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    %if has_array
    uint32_t c = 0;
    %endif
    %if has_float16:
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif
    %endif

    %if union:
    // Get Union Tag
    ret = canardDecodeScalar(transfer, (uint32_t)offset, ${union}, false, (void*)&dest->union_tag); // ${union}
    if (ret != ${union})
    {
        goto ${type_name}_error_exit;
    }
    offset += ${union};
    $!setvar("union_index", "0")!$
    %endif

    % for f in fields:
     %if union:
    ${'if' if not union_index else 'else if'} (dest->union_tag == ${union_index})
    {
      $!setvar("union_index", "union_index + 1")!$
     %endif
        %if f.type_category == t.CATEGORY_ARRAY
            %if f.dynamic_array == True

    // Dynamic Array (${f.name})
                %if f.last_item
                    %if f.bitlen > 7
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len)
    {
        //  - Calculate Array length from MSG length
        dest->${'%s' % ((f.name + '.len'))} = ((payload_len * 8) - offset ) / ${f.bitlen}; // ${f.bitlen} bit array item size
    }
    else
    {
        // - Array length ${f.array_max_size_bit_len} bits
        ret = canardDecodeScalar(transfer,
                                 (uint32_t)offset,
                                 ${f.array_max_size_bit_len},
                                 false,
                                 (void*)&dest->${'%s' % ((f.name + '.len'))}); // ${f.max_size}
        if (ret != ${f.array_max_size_bit_len})
        {
            goto ${type_name}_error_exit;
        }
        offset += ${f.array_max_size_bit_len};
    }
                    %else
    ret = canardDecodeScalar(transfer,
                             (uint32_t)offset,
                             ${f.array_max_size_bit_len},
                             false,
                             (void*)&dest->${'%s' % ((f.name + '.len'))}); // ${f.max_size}
    if (ret != ${f.array_max_size_bit_len})
    {
        goto ${type_name}_error_exit;
    }
    offset += ${f.array_max_size_bit_len};
                    %endif
                %else
    //  - Array length, not last item ${f.array_max_size_bit_len} bits
    ret = canardDecodeScalar(transfer,
                             (uint32_t)offset,
                             ${f.array_max_size_bit_len},
                             false,
                             (void*)&dest->${'%s' % ((f.name + '.len'))}); // ${f.max_size}
    if (ret != ${f.array_max_size_bit_len})
    {
        goto ${type_name}_error_exit;
    }
    offset += ${f.array_max_size_bit_len};
                %endif

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->${'%s' % ((f.name + '.data'))} = (${f.cpp_type}*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->${'%s' % ((f.name + '.len'))}; c++)
    {
                    %if f.cpp_type_category == t.CATEGORY_COMPOUND:
        offset = ${f.cpp_type}_decode_internal(transfer,
                                                0,
                                                (void*)&dest->${'%s' % ((f.name + '.data'))}[c],
                                                dyn_arr_buf,
                                                offset);
                    %else
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     (uint32_t)offset,
                                     ${f.bitlen},
                                     ${f.signedness},
                                     (void*)*dyn_arr_buf); // ${f.max_size}
            if (ret != ${f.bitlen})
            {
                goto ${type_name}_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((${f.cpp_type}*)*dyn_arr_buf) + 1);
        }
        offset += ${f.bitlen};
                    %endif
    }
            %else

    // Static array (${f.name})
    for (c = 0; c < ${f.array_size}; c++)
    {
        ret = canardDecodeScalar(transfer, (uint32_t)offset, ${f.bitlen}, ${f.signedness}, (void*)(dest->${f.name} + c));
        if (ret != ${f.bitlen})
        {
            goto ${type_name}_error_exit;
        }
        offset += ${f.bitlen};
    }
            %endif
        %elif f.type_category == t.CATEGORY_VOID:

    // Void${f.bitlen}
    offset += ${f.bitlen};
        %elif f.type_category == t.CATEGORY_COMPOUND:

    // Compound
    offset = ${f.cpp_type}_decode_internal(transfer, payload_len, &dest->${f.name}, dyn_arr_buf, offset);
    if (offset < 0)
    {
        ret = offset;
        goto ${type_name}_error_exit;
    }
        %elif f.type_category == t.CATEGORY_PRIMITIVE and f.cpp_type == "float" and f.bitlen == 16:

    // float16 special handling
    ret = canardDecodeScalar(transfer, (uint32_t)offset, ${f.bitlen}, ${f.signedness}, (void*)&tmp_float);

    if (ret != ${f.bitlen})
    {
        goto ${type_name}_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->${f.name} = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->${f.name} = (float)tmp_float;
#endif
    offset += ${f.bitlen};
        %else

    ret = canardDecodeScalar(transfer, (uint32_t)offset, ${f.bitlen}, ${f.signedness}, (void*)&dest->${f.name});
    if (ret != ${f.bitlen})
    {
        goto ${type_name}_error_exit;
    }
    offset += ${f.bitlen};
        %endif
     %if union:
    }
     %endif
    % endfor
    return offset;

${type_name}_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief ${type_name}_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     ${type_name} dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t ${type_name}_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  ${type_name}* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(${type_name}); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = ${type_name}_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}
 %else
uint32_t ${type_name}_encode_internal(${type_name}* CANARD_MAYBE_UNUSED(source),
  void* CANARD_MAYBE_UNUSED(msg_buf),
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    return offset;
}

uint32_t ${type_name}_encode(${type_name}* CANARD_MAYBE_UNUSED(source), void* CANARD_MAYBE_UNUSED(msg_buf))
{
    return 0;
}

int32_t ${type_name}_decode_internal(const CanardRxTransfer* CANARD_MAYBE_UNUSED(transfer),
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  ${type_name}* CANARD_MAYBE_UNUSED(dest),
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    return offset;
}

int32_t ${type_name}_decode(const CanardRxTransfer* CANARD_MAYBE_UNUSED(transfer),
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  ${type_name}* CANARD_MAYBE_UNUSED(dest),
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf))
{
    return 0;
}
 %endif
<!--(end)-->

% if t.kind == t.KIND_SERVICE:
${generate_primary_body(type_name=t.name_space_type_name+'Request',\
                               service='_REQUEST', max_bitlen=t.get_max_bitlen_request(), \
                               fields=t.request_fields, constants=t.request_constants, \
                               union=t.request_union, has_array=t.request_has_array, \
                               has_float16=t.request_has_float16)}

${generate_primary_body(type_name=t.name_space_type_name+'Response',\
                               service='_RESPONSE', max_bitlen=t.get_max_bitlen_response(), \
                               fields=t.response_fields, constants=t.response_constants, \
                               union=t.response_union, has_array=t.response_has_array, \
                               has_float16=t.response_has_float16)}
% else:
${generate_primary_body(type_name=t.name_space_type_name, service='', max_bitlen=t.get_max_bitlen(), \
                        fields=t.fields, constants=t.constants, union=t.union, has_array=t.has_array, \
                        has_float16=t.has_float16)}
% endif
%if t.header_only
#ifdef __cplusplus
} // extern "C"
#endif
#endif // ${t.include_guard}
%endif
